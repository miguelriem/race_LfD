!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	193;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	196;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	199;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	206;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	181;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
CGAL::convex_hull_2	include/pc_processing/pc_processing.h	/^	CGAL::convex_hull_2( pts.begin(), pts.end(),std::back_inserter(pts_ch));$/;"	p	class:CGAL	signature:( pts.begin(), pts.end(),std::back_inserter(pts_ch))
CGAL::intersection	include/pc_processing/pc_processing.h	/^	CGAL::intersection(cgal_seg, cgal_sphere,std::back_inserter(intersecs));$/;"	p	class:CGAL	signature:(cgal_seg, cgal_sphere,std::back_inserter(intersecs))
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/home\/mike\/workingcopy\/pc_processing\/build$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/home\/mike\/workingcopy\/pc_processing$/;"	m
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	10;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	13;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	16;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	22;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	25;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	34;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	36;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	40;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	43;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	49;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	52;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	55;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	58;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	61;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	66;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	77;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	80;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	86;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	92;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	12;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	18;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	30;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	34;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	36;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	42;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	45;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	48;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	54;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	57;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	60;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	68;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	74;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	77;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	9;"	d	file:
ID_VOID_MAIN	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	104;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	107;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	113;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	116;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	122;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	128;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	131;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	134;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	146;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	149;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	152;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	158;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	161;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	164;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	167;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	173;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	176;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	179;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	182;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	101;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	107;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	113;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	116;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	128;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	134;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	143;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	158;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	92;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	95;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
RM	build/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	build/Makefile	/^SUFFIXES =$/;"	m
_PC_PROCESSING_CPP_	src/pc_processing.cpp	4;"	d	file:
_PC_PROCESSING_H_	include/pc_processing/pc_processing.h	2;"	d
a	include/pc_processing/pc_processing.h	/^	double a[3] = {plane->values[0],plane->values[1],plane->values[2]};$/;"	l
cgal_pt1	include/pc_processing/pc_processing.h	/^	CGAL::Exact_spherical_kernel_3::Point_3 cgal_pt1(ptAx, ptAy, ptAz);$/;"	p	signature:(ptAx, ptAy, ptAz)
cgal_pt2	include/pc_processing/pc_processing.h	/^	CGAL::Exact_spherical_kernel_3::Point_3 cgal_pt2(ptBx, ptBy, ptBz);$/;"	p	signature:(ptBx, ptBy, ptBz)
cgal_seg	include/pc_processing/pc_processing.h	/^	CGAL::Exact_spherical_kernel_3::Line_arc_3 cgal_seg = CGAL::Exact_spherical_kernel_3::Line_arc_3($/;"	l
cgal_sphere	include/pc_processing/pc_processing.h	/^	CGAL::Exact_spherical_kernel_3::Sphere_3 cgal_sphere = $/;"	l
cluster_indices	include/pc_processing/pc_processing.h	/^	std::vector<pcl::PointIndices> cluster_indices;$/;"	l
compute_convex_hull	include/pc_processing/pc_processing.h	/^int compute_convex_hull(boost::shared_ptr<pcl::PointCloud<T> > pc_in, $/;"	f	signature:(boost::shared_ptr<pcl::PointCloud<T> > pc_in, pcl::ModelCoefficients::Ptr coeff, boost::shared_ptr<pcl::PointCloud<T> > ch_out)
compute_convex_hull	src/pc_processing.cpp	/^template int compute_convex_hull(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, pcl::ModelCoefficients::Ptr coeff, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > ch_out)
compute_convex_hull	src/pc_processing.cpp	/^template int compute_convex_hull(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, pcl::ModelCoefficients::Ptr coeff, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > ch_out)
condrem	include/pc_processing/pc_processing.h	/^	pcl::ConditionalRemoval<T> condrem (range_cond);$/;"	p	signature:(range_cond)
convex_hull_2	include/pc_processing/pc_processing.h	/^	CGAL::convex_hull_2( pts.begin(), pts.end(),std::back_inserter(pts_ch));$/;"	p	class:CGAL	signature:( pts.begin(), pts.end(),std::back_inserter(pts_ch))
create_line_strip_vizmarker_from_pc	include/pc_processing/pc_processing.h	/^int create_line_strip_vizmarker_from_pc(boost::shared_ptr<pcl::PointCloud<T> >  pc_in,$/;"	f	signature:(boost::shared_ptr<pcl::PointCloud<T> > pc_in, visualization_msgs::Marker* marker)
create_line_strip_vizmarker_from_pc	src/pc_processing.cpp	/^template int create_line_strip_vizmarker_from_pc(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >  pc_in,$/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, visualization_msgs::Marker* marker)
create_line_strip_vizmarker_from_pc	src/pc_processing.cpp	/^template int create_line_strip_vizmarker_from_pc(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> >  pc_in,$/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, visualization_msgs::Marker* marker)
create_reference_frame_from_plane_and_two_points	include/pc_processing/pc_processing.h	/^void create_reference_frame_from_plane_and_two_points($/;"	f	signature:( pcl::ModelCoefficients::Ptr plane, T *pt1, T *pt2, tf::Transform* transf)
create_reference_frame_from_plane_and_two_points	src/pc_processing.cpp	/^template void create_reference_frame_from_plane_and_two_points( pcl::ModelCoefficients::Ptr plane,$/;"	p	file:	signature:( pcl::ModelCoefficients::Ptr plane, pcl::PointXYZ *pt1, pcl::PointXYZ *pt2, tf::Transform* transf)
create_reference_frame_from_plane_and_two_points	src/pc_processing.cpp	/^template void create_reference_frame_from_plane_and_two_points( pcl::ModelCoefficients::Ptr plane,$/;"	p	file:	signature:( pcl::ModelCoefficients::Ptr plane, pcl::PointXYZRGB *pt1, pcl::PointXYZRGB *pt2, tf::Transform* transf)
detect_largest_plane	include/pc_processing/pc_processing.h	/^int detect_largest_plane(boost::shared_ptr<pcl::PointCloud<T> >  pc_in,$/;"	f	signature:(boost::shared_ptr<pcl::PointCloud<T> > pc_in, double threshold, boost::shared_ptr<pcl::PointCloud<T> > pc_out, boost::shared_ptr<pcl::ModelCoefficients> coefficients, int max_iterations )
detect_largest_plane	src/pc_processing.cpp	/^template int detect_largest_plane(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >  pc_in,$/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, double threshold, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_out, boost::shared_ptr<pcl::ModelCoefficients> coefficients, int max_iterations)
detect_largest_plane	src/pc_processing.cpp	/^template int detect_largest_plane(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> >  pc_in,$/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, double threshold, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_out, boost::shared_ptr<pcl::ModelCoefficients> coefficients, int max_iterations)
does_line_segment_intersect_sphere	include/pc_processing/pc_processing.h	/^bool does_line_segment_intersect_sphere(double ptAx, double ptAy, double ptAz,$/;"	f	signature:(double ptAx, double ptAy, double ptAz, double ptBx, double ptBy, double ptBz, double cx, double cy, double cz, double radius)
downsample_pc	include/pc_processing/pc_processing.h	/^int downsample_pc(boost::shared_ptr<pcl::PointCloud<T> > pc_in, double dx, double dy, double dz, boost::shared_ptr<pcl::PointCloud<T> > pc_out)$/;"	f	signature:(boost::shared_ptr<pcl::PointCloud<T> > pc_in, double dx, double dy, double dz, boost::shared_ptr<pcl::PointCloud<T> > pc_out)
downsample_pc	src/pc_processing.cpp	/^template int downsample_pc(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, double dx, double dy, double dz, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_out);$/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, double dx, double dy, double dz, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_out)
downsample_pc	src/pc_processing.cpp	/^template int downsample_pc(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, double dx, double dy, double dz, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_out);$/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, double dx, double dy, double dz, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_out)
ec	include/pc_processing/pc_processing.h	/^	pcl::EuclideanClusterExtraction<T> ec;$/;"	l
epp	include/pc_processing/pc_processing.h	/^	pcl::ExtractPolygonalPrismData<T> epp;                                $/;"	l
extract	include/pc_processing/pc_processing.h	/^	ec.extract(cluster_indices);$/;"	p	signature:(cluster_indices)
extract	include/pc_processing/pc_processing.h	/^	pcl::ExtractIndices<T> extract;$/;"	l
extract1	include/pc_processing/pc_processing.h	/^	pcl::ExtractIndices<T> extract1; \/\/Create the extraction object$/;"	l
extract_polygonal_prism	include/pc_processing/pc_processing.h	/^int extract_polygonal_prism(boost::shared_ptr<pcl::PointCloud<T> > pc_in, $/;"	f	signature:(boost::shared_ptr<pcl::PointCloud<T> > pc_in, boost::shared_ptr<pcl::PointCloud<T> > polygon, double min_distance, double max_distance, boost::shared_ptr<pcl::PointCloud<T> > pc_out)
extract_polygonal_prism	src/pc_processing.cpp	/^template int extract_polygonal_prism(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > polygon, double min_distance, double max_distance, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_out)
extract_polygonal_prism	src/pc_processing.cpp	/^template int extract_polygonal_prism(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > polygon, double min_distance, double max_distance, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_out)
filter_along_dimension	include/pc_processing/pc_processing.h	/^int filter_along_dimension(boost::shared_ptr<pcl::PointCloud<T> >  pc_in,$/;"	f	signature:(boost::shared_ptr<pcl::PointCloud<T> > pc_in, double threshold, std::string dimension, boost::shared_ptr<pcl::PointCloud<T> > pc_out)
filter_along_dimension	src/pc_processing.cpp	/^template int filter_along_dimension(pcl::PointCloud<pcl::PointXYZ>::Ptr pc_in,$/;"	p	file:	signature:(pcl::PointCloud<pcl::PointXYZ>::Ptr pc_in, double threshold, std::string dimension, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_out)
filter_along_dimension	src/pc_processing.cpp	/^template int filter_along_dimension(pcl::PointCloud<pcl::PointXYZRGB>::Ptr pc_in,$/;"	p	file:	signature:(pcl::PointCloud<pcl::PointXYZRGB>::Ptr pc_in, double threshold, std::string dimension, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_out)
get_XYZ_from_XYZRGB_pointcloud	include/pc_processing/pc_processing.h	/^int get_XYZ_from_XYZRGB_pointcloud(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> >  pc_in, $/;"	f	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_out)
get_all_groups_from_clustering	include/pc_processing/pc_processing.h	/^int get_all_groups_from_clustering(boost::shared_ptr<pcl::PointCloud<T> > pc_in, $/;"	f	signature:(boost::shared_ptr<pcl::PointCloud<T> > pc_in, double tolerance, size_t min_size, size_t max_size, std::vector< boost::shared_ptr<pcl::PointCloud<T> > >* clusters)
get_all_groups_from_clustering	src/pc_processing.cpp	/^template int get_all_groups_from_clustering(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, double tolerance, size_t min_size, size_t max_size, std::vector< boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > >* clusters)
get_all_groups_from_clustering	src/pc_processing.cpp	/^template int get_all_groups_from_clustering(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, double tolerance, size_t min_size, size_t max_size, std::vector< boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > >* clusters)
get_max_group_from_clustering	include/pc_processing/pc_processing.h	/^int get_max_group_from_clustering(boost::shared_ptr<pcl::PointCloud<T> > pc_in, $/;"	f	signature:(boost::shared_ptr<pcl::PointCloud<T> > pc_in, double tolerance, size_t min_size, size_t max_size, boost::shared_ptr<pcl::PointCloud<T> > pc_out)
get_max_group_from_clustering	src/pc_processing.cpp	/^template int get_max_group_from_clustering(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, double tolerance, size_t min_size, size_t max_size, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_out)
get_max_group_from_clustering	src/pc_processing.cpp	/^template int get_max_group_from_clustering(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, double tolerance, size_t min_size, size_t max_size, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_out)
indices	include/pc_processing/pc_processing.h	/^	pcl::PointIndices::Ptr indices = pcl::PointIndices::Ptr(new pcl::PointIndices);$/;"	l
info_arch	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_platform	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
inliers	include/pc_processing/pc_processing.h	/^	pcl::PointIndices::Ptr inliers (new pcl::PointIndices);$/;"	p	signature:(new pcl::PointIndices)
intersecs	include/pc_processing/pc_processing.h	/^	std::vector< CGAL::Object > intersecs;$/;"	l
intersection	include/pc_processing/pc_processing.h	/^	CGAL::intersection(cgal_seg, cgal_sphere,std::back_inserter(intersecs));$/;"	p	class:CGAL	signature:(cgal_seg, cgal_sphere,std::back_inserter(intersecs))
j	include/pc_processing/pc_processing.h	/^	int j=0;$/;"	l
main	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
main	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
max_index	include/pc_processing/pc_processing.h	/^	int max_index = -1;$/;"	l
max_pts	include/pc_processing/pc_processing.h	/^	size_t max_pts =0;$/;"	l
n	include/pc_processing/pc_processing.h	/^	double n = sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);$/;"	l
n	include/pc_processing/pc_processing.h	/^	double n[3]={pt2_projected.x - pt1_projected.x, pt2_projected.y - pt1_projected.y, pt2_projected.z - pt1_projected.z};$/;"	l
normalize_vector	include/pc_processing/pc_processing.h	/^void normalize_vector(double *v)$/;"	f	signature:(double *v)
p	include/pc_processing/pc_processing.h	/^	geometry_msgs::Point p;$/;"	l
pc_ch_local	include/pc_processing/pc_processing.h	/^	boost::shared_ptr<pcl::PointCloud<T> > pc_ch_local = boost::shared_ptr<pcl::PointCloud<T> > $/;"	l
pc_local	include/pc_processing/pc_processing.h	/^	boost::shared_ptr<pcl::PointCloud<T> > pc_local = boost::shared_ptr<pcl::PointCloud<T> > $/;"	l
pc_projected	include/pc_processing/pc_processing.h	/^	boost::shared_ptr<pcl::PointCloud<T> > pc_projected = boost::shared_ptr<pcl::PointCloud<T> > $/;"	l
pcin	include/pc_processing/pc_processing.h	/^	boost::shared_ptr<pcl::PointCloud<T> > pcin = boost::shared_ptr<pcl::PointCloud<T> > (new pcl::PointCloud<T>);$/;"	l
pcout	include/pc_processing/pc_processing.h	/^	boost::shared_ptr<pcl::PointCloud<T> > pcout = boost::shared_ptr<pcl::PointCloud<T> > (new pcl::PointCloud<T>);$/;"	l
point	include/pc_processing/pc_processing.h	/^		T point; $/;"	l
project_pc_to_plane	include/pc_processing/pc_processing.h	/^int project_pc_to_plane(boost::shared_ptr<pcl::PointCloud<T> > pc_in, boost::shared_ptr<pcl::ModelCoefficients> coefficients, boost::shared_ptr<pcl::PointCloud<T> > pc_out)$/;"	f	signature:(boost::shared_ptr<pcl::PointCloud<T> > pc_in, boost::shared_ptr<pcl::ModelCoefficients> coefficients, boost::shared_ptr<pcl::PointCloud<T> > pc_out)
project_pc_to_plane	src/pc_processing.cpp	/^template int project_pc_to_plane(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, boost::shared_ptr<pcl::ModelCoefficients> coefficients, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_out)
project_pc_to_plane	src/pc_processing.cpp	/^template int project_pc_to_plane(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, boost::shared_ptr<pcl::ModelCoefficients> coefficients, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_out)
project_point_to_plane	include/pc_processing/pc_processing.h	/^int project_point_to_plane(T* ptin, pcl::ModelCoefficients::Ptr coeff, T* ptout)$/;"	f	signature:(T* ptin, pcl::ModelCoefficients::Ptr coeff, T* ptout)
project_point_to_plane	src/pc_processing.cpp	/^template int project_point_to_plane(pcl::PointXYZ* ptin, pcl::ModelCoefficients::Ptr coeff, pcl::PointXYZ* ptout);$/;"	p	file:	signature:(pcl::PointXYZ* ptin, pcl::ModelCoefficients::Ptr coeff, pcl::PointXYZ* ptout)
project_point_to_plane	src/pc_processing.cpp	/^template int project_point_to_plane(pcl::PointXYZRGB* ptin, pcl::ModelCoefficients::Ptr coeff, pcl::PointXYZRGB* ptout);$/;"	p	file:	signature:(pcl::PointXYZRGB* ptin, pcl::ModelCoefficients::Ptr coeff, pcl::PointXYZRGB* ptout)
projection	include/pc_processing/pc_processing.h	/^	pcl::ProjectInliers<T> projection; \/\/Create the projection object$/;"	l
projection	include/pc_processing/pc_processing.h	/^	pcl::ProjectInliers<T> projection;$/;"	l
pt1	include/pc_processing/pc_processing.h	/^	T pt1 = pc_projected->points.at(0);$/;"	l
pt1_projected	include/pc_processing/pc_processing.h	/^	T pt1_projected, pt2_projected;$/;"	l
pt2	include/pc_processing/pc_processing.h	/^	T pt2 = pc_projected->points.at(1);$/;"	l
pt2_projected	include/pc_processing/pc_processing.h	/^	T pt1_projected, pt2_projected;$/;"	l
pts	include/pc_processing/pc_processing.h	/^	std::vector<CGAL::Exact_predicates_inexact_constructions_kernel::Point_2> pts; \/\/The polygon$/;"	l
pts_ch	include/pc_processing/pc_processing.h	/^	std::vector<CGAL::Exact_predicates_inexact_constructions_kernel::Point_2> pts_ch; \/\/The ch polygon$/;"	l
push_back	include/pc_processing/pc_processing.h	/^		marker->points.push_back(p);$/;"	p	signature:(p)
push_back	include/pc_processing/pc_processing.h	/^		pc_ch_local->points.push_back(point);$/;"	p	signature:(point)
range_cond	include/pc_processing/pc_processing.h	/^	boost::shared_ptr<pcl::ConditionAnd<T> > range_cond(new pcl::ConditionAnd<T>());$/;"	p	signature:(new pcl::ConditionAnd<T>())
require	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^  int require = 0;$/;"	l
require	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  int require = 0;$/;"	l
reset	include/pc_processing/pc_processing.h	/^	pc_ch_local.reset();$/;"	p	signature:()
reset	include/pc_processing/pc_processing.h	/^	pc_local.reset();$/;"	p	signature:()
reset	include/pc_processing/pc_processing.h	/^	pc_projected.reset();$/;"	p	signature:()
reset	include/pc_processing/pc_processing.h	/^	pcin.reset();$/;"	p	signature:()
reset	include/pc_processing/pc_processing.h	/^	pcout.reset();$/;"	p	signature:()
s	include/pc_processing/pc_processing.h	/^	double s[3]={a[1]*n[2] - a[2]*n[1],	a[2]*n[0] - a[0]*n[2], a[0]*n[1] - a[1]*n[0]};$/;"	l
seg	include/pc_processing/pc_processing.h	/^	pcl::SACSegmentation<T> seg;$/;"	l
setClusterTolerance	include/pc_processing/pc_processing.h	/^	ec.setClusterTolerance (tolerance); $/;"	p	signature:(tolerance)
setDistanceThreshold	include/pc_processing/pc_processing.h	/^	seg.setDistanceThreshold (threshold);$/;"	p	signature:(threshold)
setHeightLimits	include/pc_processing/pc_processing.h	/^	epp.setHeightLimits(min_distance, max_distance); $/;"	p	signature:(min_distance, max_distance)
setIndices	include/pc_processing/pc_processing.h	/^	extract.setIndices(inliers);$/;"	p	signature:(inliers)
setIndices	include/pc_processing/pc_processing.h	/^	extract1.setIndices(indices);$/;"	p	signature:(indices)
setInputCloud	include/pc_processing/pc_processing.h	/^	condrem.setInputCloud (pc_in);$/;"	p	signature:(pc_in)
setInputCloud	include/pc_processing/pc_processing.h	/^	ec.setInputCloud (pc_in);$/;"	p	signature:(pc_in)
setInputCloud	include/pc_processing/pc_processing.h	/^	epp.setInputCloud(pc_in);$/;"	p	signature:(pc_in)
setInputCloud	include/pc_processing/pc_processing.h	/^	extract.setInputCloud(pc_in);$/;"	p	signature:(pc_in)
setInputCloud	include/pc_processing/pc_processing.h	/^	extract1.setInputCloud(pc_in);$/;"	p	signature:(pc_in)
setInputCloud	include/pc_processing/pc_processing.h	/^	projection.setInputCloud(pc_in);$/;"	p	signature:(pc_in)
setInputCloud	include/pc_processing/pc_processing.h	/^	projection.setInputCloud(pcin);$/;"	p	signature:(pcin)
setInputCloud	include/pc_processing/pc_processing.h	/^	sor.setInputCloud (pc_in);$/;"	p	signature:(pc_in)
setInputCloud	include/pc_processing/pc_processing.h	/^	tree->setInputCloud(pc_in);$/;"	p	signature:(pc_in)
setInputPlanarHull	include/pc_processing/pc_processing.h	/^	epp.setInputPlanarHull(polygon);$/;"	p	signature:(polygon)
setKeepOrganized	include/pc_processing/pc_processing.h	/^	condrem.setKeepOrganized(false);$/;"	p	signature:(false)
setLeafSize	include/pc_processing/pc_processing.h	/^	sor.setLeafSize (dx, dy, dz);$/;"	p	signature:(dx, dy, dz)
setMaxClusterSize	include/pc_processing/pc_processing.h	/^	ec.setMaxClusterSize (max_size);$/;"	p	signature:(max_size)
setMaxIterations	include/pc_processing/pc_processing.h	/^	seg.setMaxIterations(max_iterations);$/;"	p	signature:(max_iterations)
setMethodType	include/pc_processing/pc_processing.h	/^	seg.setMethodType (pcl::SAC_RANSAC);$/;"	p	signature:(pcl::SAC_RANSAC)
setMinClusterSize	include/pc_processing/pc_processing.h	/^	ec.setMinClusterSize (min_size);$/;"	p	signature:(min_size)
setModelCoefficients	include/pc_processing/pc_processing.h	/^	projection.setModelCoefficients(coeff);$/;"	p	signature:(coeff)
setModelCoefficients	include/pc_processing/pc_processing.h	/^	projection.setModelCoefficients(coefficients);$/;"	p	signature:(coefficients)
setModelType	include/pc_processing/pc_processing.h	/^	projection.setModelType(pcl::SACMODEL_NORMAL_PLANE); \/\/set model type$/;"	p	signature:(pcl::SACMODEL_NORMAL_PLANE)
setModelType	include/pc_processing/pc_processing.h	/^	projection.setModelType(pcl::SACMODEL_PLANE); \/\/set model type$/;"	p	signature:(pcl::SACMODEL_PLANE)
setModelType	include/pc_processing/pc_processing.h	/^	seg.setModelType (pcl::SACMODEL_PLANE);$/;"	p	signature:(pcl::SACMODEL_PLANE)
setNegative	include/pc_processing/pc_processing.h	/^	extract.setNegative(false);$/;"	p	signature:(false)
setNegative	include/pc_processing/pc_processing.h	/^	extract1.setNegative(false);$/;"	p	signature:(false)
setOptimizeCoefficients	include/pc_processing/pc_processing.h	/^	seg.setOptimizeCoefficients(true);$/;"	p	signature:(true)
setSearchMethod	include/pc_processing/pc_processing.h	/^	ec.setSearchMethod (tree);$/;"	p	signature:(tree)
shared_ptr	include/pc_processing/pc_processing.h	/^		clusters->push_back(boost::shared_ptr<pcl::PointCloud<T> > (new pcl::PointCloud<T>));$/;"	p	signature:(new pcl::PointCloud<T>)
shared_ptr	include/pc_processing/pc_processing.h	/^	range_cond->addComparison (boost::shared_ptr< const pcl::FieldComparison<T> > $/;"	p	signature:(new pcl::FieldComparison<T> (dimension.c_str(), pcl::ComparisonOps::LT, threshold))
sor	include/pc_processing/pc_processing.h	/^	pcl::VoxelGrid<T> sor;$/;"	l
transf	include/pc_processing/pc_processing.h	/^	tf::Transform transf;$/;"	l
tree	include/pc_processing/pc_processing.h	/^	boost::shared_ptr<pcl::search::KdTree<T> > tree (new pcl::search::KdTree<T>);$/;"	p	signature:(new pcl::search::KdTree<T>)
