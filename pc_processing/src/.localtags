!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
_PC_PROCESSING_CPP_	pc_processing.cpp	4;"	d	file:
compute_convex_hull	pc_processing.cpp	/^template int compute_convex_hull(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, pcl::ModelCoefficients::Ptr coeff, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > ch_out)
compute_convex_hull	pc_processing.cpp	/^template int compute_convex_hull(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, pcl::ModelCoefficients::Ptr coeff, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > ch_out)
create_line_strip_vizmarker_from_pc	pc_processing.cpp	/^template int create_line_strip_vizmarker_from_pc(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >  pc_in,$/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, visualization_msgs::Marker* marker)
create_line_strip_vizmarker_from_pc	pc_processing.cpp	/^template int create_line_strip_vizmarker_from_pc(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> >  pc_in,$/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, visualization_msgs::Marker* marker)
create_reference_frame_from_plane_and_two_points	pc_processing.cpp	/^template void create_reference_frame_from_plane_and_two_points( pcl::ModelCoefficients::Ptr plane,$/;"	p	file:	signature:( pcl::ModelCoefficients::Ptr plane, pcl::PointXYZ *pt1, pcl::PointXYZ *pt2, tf::Transform* transf)
create_reference_frame_from_plane_and_two_points	pc_processing.cpp	/^template void create_reference_frame_from_plane_and_two_points( pcl::ModelCoefficients::Ptr plane,$/;"	p	file:	signature:( pcl::ModelCoefficients::Ptr plane, pcl::PointXYZRGB *pt1, pcl::PointXYZRGB *pt2, tf::Transform* transf)
detect_largest_plane	pc_processing.cpp	/^template int detect_largest_plane(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> >  pc_in,$/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, double threshold, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_out, boost::shared_ptr<pcl::ModelCoefficients> coefficients, int max_iterations)
detect_largest_plane	pc_processing.cpp	/^template int detect_largest_plane(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> >  pc_in,$/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, double threshold, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_out, boost::shared_ptr<pcl::ModelCoefficients> coefficients, int max_iterations)
downsample_pc	pc_processing.cpp	/^template int downsample_pc(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, double dx, double dy, double dz, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_out);$/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, double dx, double dy, double dz, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_out)
downsample_pc	pc_processing.cpp	/^template int downsample_pc(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, double dx, double dy, double dz, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_out);$/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, double dx, double dy, double dz, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_out)
extract_polygonal_prism	pc_processing.cpp	/^template int extract_polygonal_prism(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > polygon, double min_distance, double max_distance, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_out)
extract_polygonal_prism	pc_processing.cpp	/^template int extract_polygonal_prism(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > polygon, double min_distance, double max_distance, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_out)
filter_along_dimension	pc_processing.cpp	/^template int filter_along_dimension(pcl::PointCloud<pcl::PointXYZ>::Ptr pc_in,$/;"	p	file:	signature:(pcl::PointCloud<pcl::PointXYZ>::Ptr pc_in, double threshold, std::string dimension, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_out)
filter_along_dimension	pc_processing.cpp	/^template int filter_along_dimension(pcl::PointCloud<pcl::PointXYZRGB>::Ptr pc_in,$/;"	p	file:	signature:(pcl::PointCloud<pcl::PointXYZRGB>::Ptr pc_in, double threshold, std::string dimension, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_out)
get_all_groups_from_clustering	pc_processing.cpp	/^template int get_all_groups_from_clustering(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, double tolerance, size_t min_size, size_t max_size, std::vector< boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > >* clusters)
get_all_groups_from_clustering	pc_processing.cpp	/^template int get_all_groups_from_clustering(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, double tolerance, size_t min_size, size_t max_size, std::vector< boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > >* clusters)
get_max_group_from_clustering	pc_processing.cpp	/^template int get_max_group_from_clustering(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, double tolerance, size_t min_size, size_t max_size, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_out)
get_max_group_from_clustering	pc_processing.cpp	/^template int get_max_group_from_clustering(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, double tolerance, size_t min_size, size_t max_size, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_out)
project_pc_to_plane	pc_processing.cpp	/^template int project_pc_to_plane(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_in, boost::shared_ptr<pcl::ModelCoefficients> coefficients, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > pc_out)
project_pc_to_plane	pc_processing.cpp	/^template int project_pc_to_plane(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, $/;"	p	file:	signature:(boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_in, boost::shared_ptr<pcl::ModelCoefficients> coefficients, boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGB> > pc_out)
project_point_to_plane	pc_processing.cpp	/^template int project_point_to_plane(pcl::PointXYZ* ptin, pcl::ModelCoefficients::Ptr coeff, pcl::PointXYZ* ptout);$/;"	p	file:	signature:(pcl::PointXYZ* ptin, pcl::ModelCoefficients::Ptr coeff, pcl::PointXYZ* ptout)
project_point_to_plane	pc_processing.cpp	/^template int project_point_to_plane(pcl::PointXYZRGB* ptin, pcl::ModelCoefficients::Ptr coeff, pcl::PointXYZRGB* ptout);$/;"	p	file:	signature:(pcl::PointXYZRGB* ptin, pcl::ModelCoefficients::Ptr coeff, pcl::PointXYZRGB* ptout)
